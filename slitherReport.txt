'npx truffle@5.1.29 compile --all' running (use --truffle-version truffle@x.x.x to use specific version)

Compiling your contracts...
===========================
> Compiling ./contracts/DTFactory.sol
> Compiling ./contracts/Migrations.sol
> Compiling ./contracts/balancer/BConst.sol
> Compiling ./contracts/balancer/BFactory.sol
> Compiling ./contracts/balancer/BMath.sol
> Compiling ./contracts/balancer/BNum.sol
> Compiling ./contracts/balancer/BPool.sol
> Compiling ./contracts/balancer/BToken.sol
> Compiling ./contracts/communityFee/OPFCommunityFeeCollector.sol
> Compiling ./contracts/fixedRate/FixedRateExchange.sol
> Compiling ./contracts/interfaces/IERC20Template.sol
> Compiling ./contracts/metadata/DDO.sol
> Compiling ./contracts/templates/DataTokenTemplate.sol
> Compiling ./contracts/templates/token/ERC20Pausable.sol
> Compiling ./contracts/utils/Deployer.sol
> Compiling openzeppelin-solidity/contracts/GSN/Context.sol
> Compiling openzeppelin-solidity/contracts/math/SafeMath.sol
> Compiling openzeppelin-solidity/contracts/ownership/Ownable.sol
> Compiling openzeppelin-solidity/contracts/token/ERC20/ERC20.sol
> Compiling openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
> Artifacts written to /Users/ahmedali/Desktop/work/ocean-contracts/build/contracts
> Compiled successfully using:
   - solc: 0.5.7+commit.6da8b019.Emscripten.clang


- Fetching solc version list from solc-bin. Attempt #1

ERROR:ContractSolcParsing:Missing inheritance DataTokenTemplate
ERROR:ContractSolcParsing:Missing inheritance ERC20Pausable
INFO:Detectors:[91m
OPFCommunityFeeCollector.withdrawETH() (communityFee/OPFCommunityFeeCollector.sol#51-56) sends eth to arbitrary user
	Dangerous calls:
	- collector.transfer(address(this).balance) (communityFee/OPFCommunityFeeCollector.sol#55)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations[0m
INFO:Detectors:[91m
IERC20 is re-used:
	- openzeppelin-solidity/contracts/token/ERC20/IERC20.sol#7-76
	- balancer/BToken.sol#20-33
ERC20Pausable (templates/token/ERC20Pausable.sol#14-130) inherits from a contract for which the name is reused.
	- Slither could not determine which contract has a duplicate name:
		-ERC20 (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#31-230)
		-Context (openzeppelin-solidity/contracts/GSN/Context.sol#13-27)
	- Check if:
		- A inherited contract is missing from this list,
		- The contract are imported from the correct files.
	- This issue impacts the contracts inheriting from ERC20Pausable:
		-DataTokenTemplate (templates/DataTokenTemplate.sol#16-438)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#name-reused[0m
INFO:Detectors:[93m
Contract locking ether found in :
	Contract DataTokenTemplate (templates/DataTokenTemplate.sol#16-438) has payable functions:
	 - IERC20Template.mint(address,uint256) (interfaces/IERC20Template.sol#13)
	But does not have a function to withdraw the ether
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#contracts-that-lock-ether[0m
INFO:Detectors:[93m
Reentrancy in BPool.setup(address,uint256,uint256,address,uint256,uint256,uint256) (balancer/BPool.sol#150-176):
	External calls:
	- bind(dataTokenAaddress,dataTokenAmount,dataTokenWeight) (balancer/BPool.sol#162-166)
		- xfer = IERC20(erc20).transferFrom(from,address(this),amount) (balancer/BPool.sol#857)
		- xfer = IERC20(erc20).transfer(to,amount) (balancer/BPool.sol#864)
	- bind(baseTokenAddress,baseTokenAmount,baseTokenWeight) (balancer/BPool.sol#168-172)
		- xfer = IERC20(erc20).transferFrom(from,address(this),amount) (balancer/BPool.sol#857)
		- xfer = IERC20(erc20).transfer(to,amount) (balancer/BPool.sol#864)
	State variables written after the call(s):
	- finalize() (balancer/BPool.sol#175)
		- _finalized = true (balancer/BPool.sol#320)
	- bind(baseTokenAddress,baseTokenAmount,baseTokenWeight) (balancer/BPool.sol#168-172)
		- _mutex = true (balancer/BPool.sol#69)
		- _mutex = false (balancer/BPool.sol#71)
	- setSwapFee(swapFee) (balancer/BPool.sol#173)
		- _mutex = true (balancer/BPool.sol#69)
		- _mutex = false (balancer/BPool.sol#71)
	- finalize() (balancer/BPool.sol#175)
		- _mutex = true (balancer/BPool.sol#69)
		- _mutex = false (balancer/BPool.sol#71)
	- bind(baseTokenAddress,baseTokenAmount,baseTokenWeight) (balancer/BPool.sol#168-172)
		- _records[token] = Record(true,_tokens.length,0,0) (balancer/BPool.sol#339-345)
		- _records[token].denorm = denorm (balancer/BPool.sol#372)
		- _records[token].balance = balance (balancer/BPool.sol#376)
	- bind(baseTokenAddress,baseTokenAmount,baseTokenWeight) (balancer/BPool.sol#168-172)
		- _tokens.push(token) (balancer/BPool.sol#346)
	- bind(baseTokenAddress,baseTokenAmount,baseTokenWeight) (balancer/BPool.sol#168-172)
		- _totalWeight = badd(_totalWeight,bsub(denorm,oldWeight)) (balancer/BPool.sol#367)
		- _totalWeight = bsub(_totalWeight,bsub(oldWeight,denorm)) (balancer/BPool.sol#370)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
DTFactory.createToken(string,string,string,uint256) (DTFactory.sol#68-118) ignores return value by tokenInstance.initialize(name,symbol,msg.sender,cap,blob,communityFeeCollector) (DTFactory.sol#91-98)
BFactory.newBPool() (balancer/BFactory.sol#47-66) ignores return value by bpoolInstance.initialize(msg.sender,address(this),MIN_FEE,false,false) (balancer/BFactory.sol#55-61)
OPFCommunityFeeCollector.withdrawToken(address) (communityFee/OPFCommunityFeeCollector.sol#63-77) ignores return value by IERC20Template(tokenAddress).transfer(collector,IERC20Template(tokenAddress).balanceOf(address(this))) (communityFee/OPFCommunityFeeCollector.sol#73-76)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return[0m
INFO:Detectors:[92m
IERC20Template.initialize(string,string,address,uint256,string,address).name (interfaces/IERC20Template.sol#5) shadows:
	- IERC20Template.name() (interfaces/IERC20Template.sol#21) (function)
IERC20Template.initialize(string,string,address,uint256,string,address).symbol (interfaces/IERC20Template.sol#6) shadows:
	- IERC20Template.symbol() (interfaces/IERC20Template.sol#23) (function)
IERC20Template.initialize(string,string,address,uint256,string,address).cap (interfaces/IERC20Template.sol#8) shadows:
	- IERC20Template.cap() (interfaces/IERC20Template.sol#27) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
Reentrancy in DTFactory.createToken(string,string,string,uint256) (DTFactory.sol#68-118):
	External calls:
	- tokenInstance.initialize(name,symbol,msg.sender,cap,blob,communityFeeCollector) (DTFactory.sol#91-98)
	State variables written after the call(s):
	- currentTokenCount += 1 (DTFactory.sol#117)
Reentrancy in BPool.setup(address,uint256,uint256,address,uint256,uint256,uint256) (balancer/BPool.sol#150-176):
	External calls:
	- bind(dataTokenAaddress,dataTokenAmount,dataTokenWeight) (balancer/BPool.sol#162-166)
		- xfer = IERC20(erc20).transferFrom(from,address(this),amount) (balancer/BPool.sol#857)
		- xfer = IERC20(erc20).transfer(to,amount) (balancer/BPool.sol#864)
	- bind(baseTokenAddress,baseTokenAmount,baseTokenWeight) (balancer/BPool.sol#168-172)
		- xfer = IERC20(erc20).transferFrom(from,address(this),amount) (balancer/BPool.sol#857)
		- xfer = IERC20(erc20).transfer(to,amount) (balancer/BPool.sol#864)
	State variables written after the call(s):
	- finalize() (balancer/BPool.sol#175)
		- _balance[address(this)] = badd(_balance[address(this)],amt) (balancer/BToken.sol#45)
		- _balance[src] = bsub(_balance[src],amt) (balancer/BToken.sol#62)
		- _balance[dst] = badd(_balance[dst],amt) (balancer/BToken.sol#63)
	- finalize() (balancer/BPool.sol#175)
		- _publicSwap = true (balancer/BPool.sol#321)
	- setSwapFee(swapFee) (balancer/BPool.sol#173)
		- _swapFee = swapFee (balancer/BPool.sol#289)
	- finalize() (balancer/BPool.sol#175)
		- _totalSupply = badd(_totalSupply,amt) (balancer/BToken.sol#46)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Reentrancy in DTFactory.createToken(string,string,string,uint256) (DTFactory.sol#68-118):
	External calls:
	- tokenInstance.initialize(name,symbol,msg.sender,cap,blob,communityFeeCollector) (DTFactory.sol#91-98)
	Event emitted after the call(s):
	- TokenCreated(token,tokenTemplate,name) (DTFactory.sol#105)
	- TokenRegistered(token,name,symbol,cap,msg.sender,block.number,blob) (DTFactory.sol#107-115)
Reentrancy in BFactory.newBPool() (balancer/BFactory.sol#47-66):
	External calls:
	- bpoolInstance.initialize(msg.sender,address(this),MIN_FEE,false,false) (balancer/BFactory.sol#55-61)
	Event emitted after the call(s):
	- BPoolCreated(bpool,_bpoolTemplate) (balancer/BFactory.sol#64)
	- BPoolRegistered(bpool,msg.sender,block.number) (balancer/BFactory.sol#65)
Reentrancy in BPool.setup(address,uint256,uint256,address,uint256,uint256,uint256) (balancer/BPool.sol#150-176):
	External calls:
	- bind(dataTokenAaddress,dataTokenAmount,dataTokenWeight) (balancer/BPool.sol#162-166)
		- xfer = IERC20(erc20).transferFrom(from,address(this),amount) (balancer/BPool.sol#857)
		- xfer = IERC20(erc20).transfer(to,amount) (balancer/BPool.sol#864)
	- bind(baseTokenAddress,baseTokenAmount,baseTokenWeight) (balancer/BPool.sol#168-172)
		- xfer = IERC20(erc20).transferFrom(from,address(this),amount) (balancer/BPool.sol#857)
		- xfer = IERC20(erc20).transfer(to,amount) (balancer/BPool.sol#864)
	Event emitted after the call(s):
	- LOG_CALL(msg.sig,msg.sender,msg.data) (balancer/BPool.sol#60)
		- bind(baseTokenAddress,baseTokenAmount,baseTokenWeight) (balancer/BPool.sol#168-172)
	- LOG_CALL(msg.sig,msg.sender,msg.data) (balancer/BPool.sol#60)
		- finalize() (balancer/BPool.sol#175)
	- LOG_CALL(msg.sig,msg.sender,msg.data) (balancer/BPool.sol#60)
		- setSwapFee(swapFee) (balancer/BPool.sol#173)
	- Transfer(address(0),address(this),amt) (balancer/BToken.sol#47)
		- finalize() (balancer/BPool.sol#175)
	- Transfer(src,dst,amt) (balancer/BToken.sol#64)
		- finalize() (balancer/BPool.sol#175)
Reentrancy in FixedRateExchange.swap(bytes32,uint256) (fixedRate/FixedRateExchange.sol#211-248):
	External calls:
	- require(bool,string)(IERC20Template(exchanges[exchangeId].baseToken).transferFrom(msg.sender,exchanges[exchangeId].exchangeOwner,baseTokenAmount),FixedRateExchange: transferFrom failed in the baseToken contract) (fixedRate/FixedRateExchange.sol#225-232)
	- require(bool,string)(IERC20Template(exchanges[exchangeId].dataToken).transferFrom(exchanges[exchangeId].exchangeOwner,msg.sender,dataTokenAmount),FixedRateExchange: transferFrom failed in the dataToken contract) (fixedRate/FixedRateExchange.sol#233-240)
	Event emitted after the call(s):
	- Swapped(exchangeId,msg.sender,baseTokenAmount,dataTokenAmount) (fixedRate/FixedRateExchange.sol#242-247)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
Deployer.deploy(address) (utils/Deployer.sol#27-43) uses assembly
	- INLINE ASM None (utils/Deployer.sol#35-42)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
FixedRateExchange.activate(bytes32) (fixedRate/FixedRateExchange.sol#294-312) compares to a boolean constant:
	-require(bool,string)(exchanges[exchangeId].active == false,FixedRateExchange: Exchange is already activated) (fixedRate/FixedRateExchange.sol#300-303)
FixedRateExchange.deactivate(bytes32) (fixedRate/FixedRateExchange.sol#319-337) compares to a boolean constant:
	-require(bool,string)(exchanges[exchangeId].active == true,FixedRateExchange: Exchange is already deactivated) (fixedRate/FixedRateExchange.sol#325-328)
FixedRateExchange.getSupply(bytes32) (fixedRate/FixedRateExchange.sol#362-379) compares to a boolean constant:
	-exchanges[exchangeId].active == false (fixedRate/FixedRateExchange.sol#367)
FixedRateExchange.onlyActiveExchange(bytes32) (fixedRate/FixedRateExchange.sol#31-41) compares to a boolean constant:
	-require(bool,string)(exchanges[exchangeId].fixedRate != 0 && exchanges[exchangeId].active == true,FixedRateExchange: Exchange does not exist!) (fixedRate/FixedRateExchange.sol#35-39)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality[0m
INFO:Detectors:[92m
Different versions of Solidity is used in :
	- Version used: ['0.5.7', '>=0.4.21<0.7.0', '>=0.5.0', '^0.5.0', '^0.5.7']
	- 0.5.7 (balancer/BToken.sol#14)
	- 0.5.7 (balancer/BMath.sol#14)
	- ^0.5.7 (fixedRate/FixedRateExchange.sol#1)
	- ^0.5.7 (templates/DataTokenTemplate.sol#1)
	- 0.5.7 (balancer/BConst.sol#14)
	- ^0.5.7 (templates/token/ERC20Pausable.sol#1)
	- ^0.5.7 (metadata/DDO.sol#1)
	- ^0.5.0 (openzeppelin-solidity/contracts/math/SafeMath.sol#1)
	- ^0.5.7 (utils/Deployer.sol#1)
	- ^0.5.7 (balancer/BPool.sol#1)
	- >=0.5.0 (interfaces/IERC20Template.sol#1)
	- ^0.5.7 (DTFactory.sol#1)
	- ^0.5.7 (balancer/BFactory.sol#1)
	- ^0.5.0 (openzeppelin-solidity/contracts/GSN/Context.sol#1)
	- ^0.5.7 (communityFee/OPFCommunityFeeCollector.sol#1)
	- 0.5.7 (balancer/BNum.sol#14)
	- >=0.4.21<0.7.0 (Migrations.sol#1)
	- ^0.5.0 (openzeppelin-solidity/contracts/ownership/Ownable.sol#1)
	- ^0.5.0 (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#1)
	- ^0.5.0 (openzeppelin-solidity/contracts/token/ERC20/IERC20.sol#1)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used[0m
INFO:Detectors:[92m
Pragma version0.5.7 (balancer/BToken.sol#14) allows old versions
Pragma version0.5.7 (balancer/BMath.sol#14) allows old versions
Pragma version^0.5.7 (fixedRate/FixedRateExchange.sol#1) allows old versions
Pragma version^0.5.7 (templates/DataTokenTemplate.sol#1) allows old versions
Pragma version0.5.7 (balancer/BConst.sol#14) allows old versions
Pragma version^0.5.7 (templates/token/ERC20Pausable.sol#1) allows old versions
Pragma version^0.5.7 (metadata/DDO.sol#1) allows old versions
Pragma version^0.5.0 (openzeppelin-solidity/contracts/math/SafeMath.sol#1) allows old versions
Pragma version^0.5.7 (utils/Deployer.sol#1) allows old versions
Pragma version^0.5.7 (balancer/BPool.sol#1) allows old versions
Pragma version>=0.5.0 (interfaces/IERC20Template.sol#1) allows old versions
Pragma version^0.5.7 (DTFactory.sol#1) allows old versions
Pragma version^0.5.7 (balancer/BFactory.sol#1) allows old versions
Pragma version^0.5.0 (openzeppelin-solidity/contracts/GSN/Context.sol#1) allows old versions
Pragma version^0.5.7 (communityFee/OPFCommunityFeeCollector.sol#1) allows old versions
Pragma version0.5.7 (balancer/BNum.sol#14) allows old versions
Pragma version>=0.4.21<0.7.0 (Migrations.sol#1) allows old versions
Pragma version^0.5.0 (openzeppelin-solidity/contracts/ownership/Ownable.sol#1) allows old versions
Pragma version^0.5.0 (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#1) allows old versions
Pragma version^0.5.0 (openzeppelin-solidity/contracts/token/ERC20/IERC20.sol#1) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Variable BTokenBase._balance (balancer/BToken.sol#37) is not in mixedCase
Variable BTokenBase._allowance (balancer/BToken.sol#38) is not in mixedCase
Variable BTokenBase._totalSupply (balancer/BToken.sol#39) is not in mixedCase
Function FixedRateExchange.CalcInGivenOut(bytes32,uint256) (fixedRate/FixedRateExchange.sol#190-203) is not in mixedCase
Parameter Deployer.deploy(address)._logic (utils/Deployer.sol#28) is not in mixedCase
Event BPoolLOG_SWAP(address,address,address,uint256,uint256) (balancer/BPool.sol#33-39) is not in CapWords
Event BPoolLOG_JOIN(address,address,uint256) (balancer/BPool.sol#41-45) is not in CapWords
Event BPoolLOG_EXIT(address,address,uint256) (balancer/BPool.sol#47-51) is not in CapWords
Event BPoolLOG_CALL(bytes4,address,bytes) (balancer/BPool.sol#53-57) is not in CapWords
Modifier BPool._logs_() (balancer/BPool.sol#59-62) is not in mixedCase
Modifier BPool._lock_() (balancer/BPool.sol#64-72) is not in mixedCase
Modifier BPool._viewlock_() (balancer/BPool.sol#74-77) is not in mixedCase
Variable Migrations.last_completed_migration (Migrations.sol#6) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
BToken._decimals (balancer/BToken.sol#80) should be constant
BToken._name (balancer/BToken.sol#78) should be constant
BToken._symbol (balancer/BToken.sol#79) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
name() should be declared external:
	- BToken.name() (balancer/BToken.sol#82-84)
symbol() should be declared external:
	- BToken.symbol() (balancer/BToken.sol#86-88)
decimals() should be declared external:
	- BToken.decimals() (balancer/BToken.sol#90-92)
isInitialized() should be declared external:
	- BPool.isInitialized() (balancer/BPool.sol#104-106)
initialize(address,address,uint256,bool,bool) should be declared external:
	- BPool.initialize(address,address,uint256,bool,bool) (balancer/BPool.sol#115-127)
setPublicSwap(bool) should be declared external:
	- BPool.setPublicSwap(bool) (balancer/BPool.sol#301-309)
createToken(string,string,string,uint256) should be declared external:
	- DTFactory.createToken(string,string,string,uint256) (DTFactory.sol#68-118)
newBPool() should be declared external:
	- BFactory.newBPool() (balancer/BFactory.sol#47-66)
setCompleted(uint256) should be declared external:
	- Migrations.setCompleted(uint256) (Migrations.sol#16-18)
owner() should be declared external:
	- Ownable.owner() (openzeppelin-solidity/contracts/ownership/Ownable.sol#30-32)
renounceOwnership() should be declared external:
	- Ownable.renounceOwnership() (openzeppelin-solidity/contracts/ownership/Ownable.sol#56-59)
balanceOf(address) should be declared external:
	- ERC20.balanceOf(address) (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#50-52)
transfer(address,uint256) should be declared external:
	- ERC20.transfer(address,uint256) (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#62-65)
allowance(address,address) should be declared external:
	- ERC20.allowance(address,address) (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#70-72)
approve(address,uint256) should be declared external:
	- ERC20.approve(address,uint256) (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#81-84)
transferFrom(address,address,uint256) should be declared external:
	- ERC20.transferFrom(address,address,uint256) (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#98-102)
increaseAllowance(address,uint256) should be declared external:
	- ERC20.increaseAllowance(address,uint256) (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#116-119)
decreaseAllowance(address,uint256) should be declared external:
	- ERC20.decreaseAllowance(address,uint256) (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol#135-138)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Slither:. analyzed (21 contracts with 46 detectors), 77 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m
